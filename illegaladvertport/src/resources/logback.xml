<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->  
    <property name="LOG_HOME_ALL" value="/home/dev/log/mqcash/ad" />
    <property name="LOG_HOME_OTHER" value="/home/dev/log/mqcash/ad" />
    <property name="LOG_HOME_ERROR" value="/home/dev/log/mqcash/ad" />
    <!-- 日志文件大小 -->
    <property name="LOG.MAX.SIZE" value="1MB" />
    <!-- 根ROOT日志级别 -->
    <property name="LOG.LEVEL.ROOT" value="DEBUG" />
    <!-- 业务日志级别 -->
    <property name="LOG.LEVEL.BUS" value="DEBUG" />
    <!-- SQL日志级别 -->
    <property name="LOG.LEVEL.SQL" value="DEBUG" />
	
    <!-- 控制台输出 -->   
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
             <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--> 
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %X{trace.id} %logger{50} - %msg%n</pattern>   
        </encoder> 
    </appender>
    
    <!-- 用来保存输出所有级别的日志 -->
	<appender name="file.all"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME_ALL}/all_%d{yyyy-MM-dd}.log</FileNamePattern> 
            <!--日志文件保留天数-->
            <!-- 
            <MaxHistory>30</MaxHistory>
             -->
        </rollingPolicy>   
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--> 
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %X{trace.id} %logger{50} - %msg%n</pattern>   
        </encoder>
        <!-- 编码 -->
        <Encoding>UTF-8</Encoding>
        <!-- 
        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        	<maxFileSize>${LOG.MAX.SIZE}</maxFileSize>
        </timeBasedFileNamingAndTriggeringPolicy>
         -->
        <!--日志文件最大的大小-->
        <!-- 
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
         -->
    </appender>
    
    <!-- 按照每天生成日志文件 -->   
    <appender name="file.other"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME_OTHER}/other_%d{yyyy-MM-dd}.log</FileNamePattern> 
            <!--日志文件保留天数-->
            <!-- 
            <MaxHistory>30</MaxHistory>
             -->
        </rollingPolicy>   
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--> 
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %X{trace.id} %logger{50} - %msg%n</pattern>   
        </encoder>
        <!-- 编码 -->
        <Encoding>UTF-8</Encoding>
        <!-- 
        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        	<maxFileSize>${LOG.MAX.SIZE}</maxFileSize>
        </timeBasedFileNamingAndTriggeringPolicy>
         -->
        <!--日志文件最大的大小-->
        <!-- 
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
         -->
    </appender>
    
    <appender name="file.error"  class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>ERROR</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME_ERROR}/error_%d{yyyy-MM-dd}.log</FileNamePattern> 
        </rollingPolicy>   
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--> 
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %X{trace.id} %logger{50} - %msg%n</pattern>   
        </encoder>
        <!-- 编码 -->
        <Encoding>UTF-8</Encoding>
    </appender> 
    
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <!-- 添加附加的appender,最多只能添加一个 -->
	<appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<includeCallerData>true</includeCallerData>
		<appender-ref ref="file.all" />
	</appender>

	<appender name="file.async.other" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<includeCallerData>true</includeCallerData>
		<appender-ref ref="file.other" />
	</appender>
    
    <!--myibatis log configure--> 
    <logger name="com.greenkoo" level="${LOG.LEVEL.BUS}" additivity="false">
    	<appender-ref ref="stdout" />
        <appender-ref ref="file.async" />
        <appender-ref ref="file.error" />
    </logger>
    
    <logger name="mybatis.dao" level="${LOG.LEVEL.BUS}" additivity="false">
    	<appender-ref ref="stdout" />
        <appender-ref ref="file.async" />
        <appender-ref ref="file.error" />
    </logger>
    
    <!-- 日志输出级别 -->
    <root level="${LOG.LEVEL.ROOT}">
    	<appender-ref ref="stdout" />
        <appender-ref ref="file.async.other" />
        <appender-ref ref="file.error" />
    </root>
       
</configuration>